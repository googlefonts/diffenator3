(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[,function(e,t,r){"use strict";r.r(t);const n=new function(){return new Worker(r.p+"bootstrap.worker.js")};jQuery.fn.shake=function(e,t,r){e=void 0===e?100:e,t=void 0===t?10:t,r=void 0===r?3:r;var n=$(this);n.css("position","relative");for(var o=0;o<r+1;o++)n.animate({left:o%2==0?t:-1*t},e);return n.animate({left:0},e)};class o{constructor(){this.beforeFont=null,this.afterFont=null}get beforeCssStyle(){return document.styleSheets[0].cssRules[0].style}get afterCssStyle(){return document.styleSheets[0].cssRules[1].style}dropFile(e,t){if(!e[0].name.match(/\.[ot]tf$/i))return void $(t).shake();var r;"fontbefore"==t.id?(r=this.beforeCssStyle,$(t).find("h2").addClass("font-before")):(r=this.afterCssStyle,$(t).find("h2").addClass("font-after")),window.thing=e[0],$(t).find("h2").text(e[0].name),r.setProperty("src","url("+URL.createObjectURL(e[0])+")");var n=new FileReader;let o=this;n.onload=function(e){let r=new Uint8Array(this.result);"fontbefore"==t.id?o.beforeFont=r:o.afterFont=r,o.beforeFont&&o.afterFont&&o.letsDoThis()},n.readAsArrayBuffer(e[0])}renderTableDiff(e,t){var r=$("<div> </div>");if(!e)return r;if(Array.isArray(e)){var n=$("<span/>");n.addClass("attr-before"),n.html(" "+e[0]+" ");var o=$("<span/>");return o.addClass("attr-after"),o.append(this.renderTableDiff(e[1],!0).children()),r.append(n),r.append(o),r}if(e.constructor!=Object){var a=$("<span/>");return a.html(e),r.append(a),r}for(const[n,o]of Object.entries(e)){var s=$("<div/>");s.addClass("node"),t||s.hide(),s.append(n),s.append(this.renderTableDiff(o,!1).children()),r.append(s)}return r}progress_callback(e){try{let n=JSON.parse(e);if(console.log("Hiding spinner"),$("#spinnerModal").hide(0),console.log(n),n.tables){let e=n.tables;$("#difftable").empty(),$("#difftable").append(this.renderTableDiff(e,!0).children())}else if(n.glyphs){let e=n.glyphs;this.renderGlyphDiff(e),$(".node").on("click",(function(e){$(this).children().toggle(),e.stopPropagation()}))}else if(n.words)for(var[t,r]of(console.log(t),Object.entries(n.words)))this.renderWordDiff(t,r)}catch(e){console.error(e)}}letsDoThis(){$("#startModal").hide(),$("#spinnerModal").show(),$("#wordspinner").show(),console.log("Showing spinner"),n.onmessage=e=>this.progress_callback(e.data),n.postMessage({beforeFont:this.beforeFont,afterFont:this.afterFont})}addAGlyph(e,t){t.append(`\n\t\t\t<div class="cell-word font-before">\n\t\t    <span data-toggle="tooltip" data-html="true" data-title="name: ${e.name}<br>unicode: ${e.unicode}">\n\t        ${e.string}\n\t        </span>\n\t\t\t</div>\n\t\t`)}addAWord(e,t){t.append(`\n\t\t\t<div class="cell-word font-before">\n\t\t    <span data-toggle="tooltip" data-html="true" data-title="before: <pre>${e.buffer_a}</pre><br>after: <pre>${e.buffer_b}</pre><br>percent: ${e.percent}">\n\t        ${e.word}\n\t        </span>\n\t\t\t</div>\n\t\t`)}renderGlyphDiff(e){for(var[t,r]of($("#glyphdiff").empty(),Object.entries(e))){let e=t.charAt(0).toUpperCase()+t.slice(1);if(r.length>0){let t=this;$("#glyphdiff").append($(`<h2>${e} glyphs</h2>`));let n=$('<div class="glyphgrid"/>');$("#glyphdiff").append(n),r.forEach(e=>{t.addAGlyph(e,n)})}}$('[data-toggle="tooltip"]').tooltip()}renderWordDiff(e,t){$("#wordspinner").hide(),$("#worddiff").append($(`<h2>${e} words</h2>`));let r=$('<div class="wordgrid"/>');$("#worddiff").append(r),t.forEach(e=>{this.addAWord(e,r)}),$('[data-toggle="tooltip"]').tooltip()}}$((function(){window.diffenator=new o,$("#startModal").show(),$(".fontdrop").on("dragover dragenter",(function(e){e.preventDefault(),e.stopPropagation(),$(this).addClass("dragging")})),$(".fontdrop").on("dragleave dragend",(function(e){$(this).removeClass("dragging")})),$(".fontdrop").on("drop",(function(e){$(this).removeClass("dragging"),e.originalEvent.dataTransfer&&e.originalEvent.dataTransfer.files.length&&(e.preventDefault(),e.stopPropagation(),diffenator.dropFile(e.originalEvent.dataTransfer.files,this))})),$("#fonttoggle").click((function(){"Old"==$(this).text()?($(this).text("New"),$(".font-before").removeClass("font-before").addClass("font-after")):($(this).text("Old"),$(".font-after").removeClass("font-after").addClass("font-before"))}))}))}]]);