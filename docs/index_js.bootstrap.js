"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcreate_wasm_app"] = self["webpackChunkcreate_wasm_app"] || []).push([["index_js"],{

/***/ "../../templates/shared.js":
/*!*********************************!*\
  !*** ../../templates/shared.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addAGlyph: () => (/* binding */ addAGlyph),\n/* harmony export */   addAWord: () => (/* binding */ addAWord),\n/* harmony export */   cmapDiff: () => (/* binding */ cmapDiff),\n/* harmony export */   diffKerns: () => (/* binding */ diffKerns),\n/* harmony export */   diffTables: () => (/* binding */ diffTables),\n/* harmony export */   renderTableDiff: () => (/* binding */ renderTableDiff),\n/* harmony export */   setupAnimation: () => (/* binding */ setupAnimation)\n/* harmony export */ });\nfunction renderTableDiff(node, toplevel) {\n  var wrapper = $(\"<div> </div>\");\n  if (!node) {\n    return wrapper;\n  }\n  if (Array.isArray(node) && node.length == 2) {\n    var before = $(\"<span/>\");\n    before.addClass(\"attr-before\");\n    before.html(\" \" + node[0] + \" \");\n    var after = $(\"<span/>\");\n    after.addClass(\"attr-after\");\n    after.append(renderTableDiff(node[1], true).children());\n    wrapper.append(before);\n    wrapper.append(after);\n    return wrapper;\n  }\n  if (node.constructor != Object) {\n    var thing = $(\"<span/>\");\n    thing.html(node);\n    wrapper.append(thing);\n    return wrapper;\n  }\n  for (const [key, value] of Object.entries(node)) {\n    var display = $(\"<div/>\");\n    display.addClass(\"node\");\n    if (!toplevel) {\n      display.hide();\n    }\n    display.append(key);\n    display.append(renderTableDiff(value, false).children());\n    if (display.children(\".node\").length > 0) {\n      display.addClass(\"closed\");\n    }\n    wrapper.append(display);\n  }\n  return wrapper;\n}\n\nfunction addAGlyph(glyph, where) {\n  let title = \"\";\n  if (glyph.name) {\n    title = \"name: \" + glyph.name;\n  }\n  let cp =\n    \"<br>U+\" +\n    glyph.string.codePointAt(0).toString(16).padStart(4, \"0\").toUpperCase();\n  where.append(`\n        <div class=\"cell-glyph font-before\">\n        <div data-toggle=\"tooltip\" data-html=\"true\" data-title=\"${glyph.differing_pixels} pixels\"> ${glyph.string}\n        <div class=\"codepoint\" data-toggle=\"tooltip\" data-html=\"true\" data-title=\"${title}\">\n\t\t${cp}\n        </div>\n        </div>\n    `);\n}\n\nfunction addAWord(diff, where) {\n  if (!diff.buffer_b) {\n    diff.buffer_b = diff.buffer_a;\n  }\n  where.append(`\n\t\t<div class=\"cell-word font-before\">\n\t\t<span data-toggle=\"tooltip\" data-html=\"true\" data-title=\"Before: <pre>${diff.buffer_a}</pre>After: <pre>${diff.buffer_b}</pre><br>difference: ${diff.differing_pixels} pixels\">\n\t\t${diff.word}\n\t\t</span>\n\t\t</div>\n\t`);\n}\n\nfunction diffTables(report) {\n  $(\"#difftable\").empty();\n  $(\"#difftable\").append(`<h4 class=\"mt-2 box-title\">Table-level details</h4>`);\n  $(\"#difftable\").append(\n    renderTableDiff({ tables: report[\"tables\"] }, true).children()\n  );\n  $(\"#difftable .node\").on(\"click\", function (e) {\n    $(this).toggleClass(\"closed open\");\n    $(this).children(\".node\").toggle();\n    e.stopPropagation();\n  });\n}\nfunction diffKerns(report) {\n  $(\"#diffkerns\").empty();\n  $(\"#diffkerns\").append(`<h4 class=\"mt-2\">Modified Kerns</h4>`);\n  $(\"#diffkerns\").append(\n    `<table class=\"table table-striped\" id=\"diffkerns\"><tr><th>Pair</th><th>Old</old><th>New</th></table>`\n  );\n  for (let [pair, value] of Object.entries(report[\"kerns\"])) {\n    if (pair == \"error\") {\n      $(\"#diffkerns\").append(`<p class=\"text-danger\">Error: ${value}</p>`);\n      continue;\n    } else {\n      let row = $(\"<tr>\");\n      row.append(`<td>${pair}</td>`);\n      row.append(`<td>${serializeKernBefore(value)}</td>`);\n      row.append(`<td>${serializeKernAfter(value)}</td>`);\n      $(\"#diffkerns table\").append(row);\n    }\n  }\n}\n\nfunction serializeKernBefore(kern) {\n  if (Array.isArray(kern)) {\n    return serializeKern(kern[0], -1);\n  }\n  return serializeKern(kern, 0);\n}\n\nfunction serializeKernAfter(kern) {\n  if (Array.isArray(kern)) {\n    return serializeKern(kern[1], -1);\n  }\n  return serializeKern(kern, 1);\n}\n\nfunction serializeKern(kern, index) {\n  let string = \"\";\n  if (kern === null || kern === undefined) {\n    return \"(null)\";\n  }\n  if (kern.x) {\n    string += serializeKernValue(kern.x, index);\n  } else if (kern.y) {\n    string = \"0\";\n  }\n\n  if (kern.y) {\n    string += \",\" + serializeKernValue(kern.y, index);\n  }\n  if (!kern.x_placement && !kern.y_placement) {\n    return string;\n  }\n  string += \"@\";\n  if (kern.x_placement) {\n    string += serializeKernValue(kern.x_placement, index);\n  } else if (kern.y_placement) {\n    string += \"0\";\n  }\n  if (kern.y_placement) {\n    string += \",\" + serializeKernValue(kern.y_placement, index);\n  }\n  return string;\n}\n\nfunction serializeKernValue(kern, index) {\n  if (typeof kern == \"number\") {\n    return kern;\n  }\n  let string = \"(\";\n  let verybig = Object.entries(kern).length > 5;\n  for (let [key, value] of Object.entries(kern)) {\n    if (key == \"default\") {\n      string += value[index] + \" \";\n    } else {\n      string += value[index] + \"@\" + key + \" \";\n    }\n    if (verybig) {\n      string += \"<br>\";\n    }\n  }\n  return string.trim() + \")\";\n}\n\nfunction cmapDiff(report) {\n  if (report.cmap_diff && (report.cmap_diff.new || report.cmap_diff.missing)) {\n    $(\"#cmapdiff\").append(\n      `<h4 class=\"mt-2\">Added and Removed Encoded Glyphs</h4>`\n    );\n    if (report[\"cmap_diff\"][\"new\"]) {\n      $(\"#cmapdiff\").append(`<h4 class=\"box-title\">Added Glyphs</h4>`);\n      let added = $(\"<div>\");\n      for (let glyph of report[\"cmap_diff\"][\"new\"]) {\n        addAGlyph(glyph, added);\n      }\n      $(\"#cmapdiff\").append(added);\n    }\n\n    if (report[\"cmap_diff\"][\"missing\"]) {\n      $(\"#cmapdiff\").append(`<h4 class=\"box-title\">Removed Glyphs</h4>`);\n      let missing = $(\"<div>\");\n      for (let glyph of report[\"cmap_diff\"][\"missing\"]) {\n        addAGlyph(glyph, missing);\n      }\n      $(\"#cmapdiff\").append(missing);\n    }\n  } else {\n    $(\"#cmapdiff\").append(`<p>No changes to encoded glyphs</p>`);\n  }\n}\n\nfunction setupAnimation() {\n  $(\"#fonttoggle\").click(function () {\n    if ($(this).text() == \"Old\") {\n      $(this).text(\"New\");\n      $(\".font-before\").removeClass(\"font-before\").addClass(\"font-after\");\n    } else {\n      $(this).text(\"Old\");\n      $(\".font-after\").removeClass(\"font-after\").addClass(\"font-before\");\n    }\n  });\n\n  let animationHandle;\n  function animate() {\n    $(\"#fonttoggle\").click();\n    animationHandle = setTimeout(animate, 1000);\n  }\n  $(\"#fontanimate\").click(function () {\n    if ($(this).text() == \"Animate\") {\n      $(this).text(\"Stop\");\n      animate();\n    } else {\n      $(this).text(\"Animate\");\n      clearTimeout(animationHandle);\n    }\n  });\n}\n\n\n\n\n//# sourceURL=webpack://create-wasm-app/../../templates/shared.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _templates_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../templates/shared */ \"../../templates/shared.js\");\nconst diffWorker = new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(\"webworker_js\"), __webpack_require__.b));\n\n\n\njQuery.fn.shake = function (interval, distance, times) {\n  interval = typeof interval == \"undefined\" ? 100 : interval;\n  distance = typeof distance == \"undefined\" ? 10 : distance;\n  times = typeof times == \"undefined\" ? 3 : times;\n  var jTarget = $(this);\n  jTarget.css(\"position\", \"relative\");\n  for (var iter = 0; iter < times + 1; iter++) {\n    jTarget.animate(\n      {\n        left: iter % 2 == 0 ? distance : distance * -1,\n      },\n      interval\n    );\n  }\n  return jTarget.animate(\n    {\n      left: 0,\n    },\n    interval\n  );\n};\n\nclass Diffenator {\n  constructor() {\n    this.beforeFont = null;\n    this.afterFont = null;\n  }\n\n  get beforeCssStyle() {\n    return document.styleSheets[0].cssRules[0].style;\n  }\n  get afterCssStyle() {\n    return document.styleSheets[0].cssRules[1].style;\n  }\n\n  setVariationStyle(variations) {\n    let rule = document.styleSheets[0].cssRules[2].style;\n    rule.setProperty(\"font-variation-settings\", variations);\n  }\n\n  dropFile(files, element) {\n    if (!files[0].name.match(/\\.[ot]tf$/i)) {\n      $(element).shake();\n      return;\n    }\n    var style;\n    if (element.id == \"fontbefore\") {\n      style = this.beforeCssStyle;\n      $(element).find(\"h2\").addClass(\"font-before\");\n    } else {\n      style = this.afterCssStyle;\n      $(element).find(\"h2\").addClass(\"font-after\");\n    }\n    window.thing = files[0];\n    $(element).find(\"h2\").text(files[0].name);\n    style.setProperty(\"src\", \"url(\" + URL.createObjectURL(files[0]) + \")\");\n    var reader = new FileReader();\n    let that = this;\n    reader.onload = function (e) {\n      let u8 = new Uint8Array(this.result);\n      if (element.id == \"fontbefore\") {\n        that.beforeFont = u8;\n      } else {\n        that.afterFont = u8;\n      }\n      if (that.beforeFont && that.afterFont) {\n        that.letsDoThis();\n      }\n    };\n    reader.readAsArrayBuffer(files[0]);\n  }\n\n  setVariations() {\n    let cssSetting = $(\"#axes input\")\n      .map(function () {\n        return `\"${this.id.replace(\"axis-\", \"\")}\" ${this.value}`;\n      })\n      .get()\n      .join(\", \");\n    this.setVariationStyle(cssSetting);\n    this.updateGlyphs();\n  }\n\n  setupAxes(message) {\n    $(\"#axes\").empty();\n    console.log(message);\n    let { axes, instances } = message;\n    for (var [tag, limits] of Object.entries(axes)) {\n      console.log(tag, limits);\n      let [axis_min, axis_def, axis_max] = limits;\n      let axis = $(`<div class=\"axis\">\n\t\t\t\t${tag}\n\t\t\t\t<input type=\"range\" min=\"${axis_min}\" max=\"${axis_max}\" value=\"${axis_def}\" class=\"slider\" id=\"axis-${tag}\">\n\t\t\t`);\n      $(\"#axes\").append(axis);\n      axis.on(\"input\", this.setVariations.bind(this));\n      axis.on(\"change\", this.updateWords.bind(this));\n    }\n    if (Object.keys(instances).length > 0) {\n      let select = $(\"<select id='instance-select'></select>\");\n      for (var [name, location] of instances) {\n        console.log(location);\n        let location_str = Object.entries(location)\n          .map(([k, v]) => `${k}=${v}`)\n          .join(\",\");\n        let option = $(`<option value=\"${location_str}\">${name}</option>`);\n        select.append(option);\n      }\n      select.on(\"change\", function () {\n        let location = $(this).val();\n        let parts = location.split(\",\");\n        for (let [i, part] of parts.entries()) {\n          let [tag, value] = part.split(\"=\");\n          console.log(tag, value);\n          $(`#axis-${tag}`).val(value);\n        }\n        $(\"#axes input\").trigger(\"input\");\n        $(\"#axes input\").trigger(\"change\");\n      });\n      $(\"#axes\").append(select);\n    }\n  }\n\n  progress_callback(message) {\n    console.log(\"Got json \", message);\n    if (\"type\" in message && message.type == \"ready\") {\n      $(\"#bigLoadingModal\").hide();\n      $(\"#startModal\").show();\n    } else if (message.type == \"axes\") {\n      this.setupAxes(message); // Contains axes and named instances\n    } else if (message.type == \"tables\") {\n      // console.log(\"Hiding spinner\")\n      $(\"#spinnerModal\").hide();\n      (0,_templates_shared__WEBPACK_IMPORTED_MODULE_0__.diffTables)(message);\n    } else if (message.type == \"kerns\") {\n      // console.log(\"Hiding spinner\")\n      $(\"#spinnerModal\").hide();\n      (0,_templates_shared__WEBPACK_IMPORTED_MODULE_0__.diffKerns)(message);\n    } else if (message.type == \"modified_glyphs\") {\n      $(\"#spinnerModal\").hide();\n      let glyph_diff = message.modified_glyphs;\n      this.renderGlyphDiff(glyph_diff);\n      $(\".node\").on(\"click\", function (event) {\n        $(this).children().toggle();\n        event.stopPropagation();\n      });\n    } else if (message.type == \"new_missing_glyphs\") {\n      $(\"#spinnerModal\").hide();\n      this.renderCmapDiff(message);\n      $(\".node\").on(\"click\", function (event) {\n        $(this).children().toggle();\n        event.stopPropagation();\n      });\n    } else if (message.type == \"words\") {\n      $(\"#spinnerModal\").hide();\n      $(\"#wordspinner\").hide();\n      let diffs = message.words;\n      for (var [script, words] of Object.entries(diffs)) {\n        this.renderWordDiff(script, words);\n      }\n    }\n  }\n\n  variationLocation() {\n    // Return the current axis location as a string of the form\n    // tag=value,tag=value\n    return $(\"#axes input\")\n      .map(function () {\n        return `${this.id.replace(\"axis-\", \"\")}=${this.value}`;\n      })\n      .get()\n      .join(\",\");\n  }\n\n  letsDoThis() {\n    $(\"#startModal\").hide();\n    $(\"#spinnerModal\").show();\n    diffWorker.postMessage({\n      command: \"axes\",\n      beforeFont: this.beforeFont,\n      afterFont: this.afterFont,\n    });\n    diffWorker.postMessage({\n      command: \"tables\",\n      beforeFont: this.beforeFont,\n      afterFont: this.afterFont,\n    });\n    diffWorker.postMessage({\n      command: \"kerns\",\n      beforeFont: this.beforeFont,\n      afterFont: this.afterFont,\n    });\n    diffWorker.postMessage({\n      command: \"new_missing_glyphs\",\n      beforeFont: this.beforeFont,\n      afterFont: this.afterFont,\n    });\n    this.updateGlyphs();\n    this.updateWords();\n  }\n\n  updateGlyphs() {\n    let location = this.variationLocation();\n    diffWorker.postMessage({\n      command: \"modified_glyphs\",\n      beforeFont: this.beforeFont,\n      afterFont: this.afterFont,\n      location,\n    });\n  }\n\n  updateWords() {\n    $(\"#wordspinner\").show();\n    $(\"#worddiffinner\").empty();\n    let location = this.variationLocation();\n    diffWorker.postMessage({\n      command: \"words\",\n      beforeFont: this.beforeFont,\n      afterFont: this.afterFont,\n      location,\n    });\n  }\n\n  renderCmapDiff(glyph_diff) {\n    $(\"#cmapdiff\").empty();\n    (0,_templates_shared__WEBPACK_IMPORTED_MODULE_0__.cmapDiff)(glyph_diff);\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  renderGlyphDiff(glyph_diff) {\n    $(\"#glyphdiff\").empty();\n    if (glyph_diff.length > 0) {\n      $(\"#glyphdiff\").append($(`<h4>Modified glyphs</h4>`));\n      let place = $('<div class=\"glyphgrid\"/>');\n      $(\"#glyphdiff\").append(place);\n\n      glyph_diff.forEach((glyph) => {\n        (0,_templates_shared__WEBPACK_IMPORTED_MODULE_0__.addAGlyph)(glyph, place);\n      });\n      $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n  }\n\n  renderWordDiff(script, diffs) {\n    $(\"#worddiffinner\").append($(`<h6>${script}</h6>`));\n    let place = $('<div class=\"wordgrid\"/>');\n    $(\"#worddiffinner\").append(place);\n    diffs.forEach((glyph) => {\n      (0,_templates_shared__WEBPACK_IMPORTED_MODULE_0__.addAWord)(glyph, place);\n    });\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n}\n\n$(function () {\n  window.diffenator = new Diffenator();\n  diffWorker.onmessage = (e) => window.diffenator.progress_callback(e.data);\n  $(\"#bigLoadingModal\").show();\n\n  $(\".fontdrop\").on(\"dragover dragenter\", function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    $(this).addClass(\"dragging\");\n  });\n  $(\".fontdrop\").on(\"dragleave dragend\", function (e) {\n    $(this).removeClass(\"dragging\");\n  });\n\n  $(\".fontdrop\").on(\"drop\", function (e) {\n    $(this).removeClass(\"dragging\");\n    if (\n      e.originalEvent.dataTransfer &&\n      e.originalEvent.dataTransfer.files.length\n    ) {\n      e.preventDefault();\n      e.stopPropagation();\n      diffenator.dropFile(e.originalEvent.dataTransfer.files, this);\n    }\n  });\n\n  (0,_templates_shared__WEBPACK_IMPORTED_MODULE_0__.setupAnimation)();\n});\n\n\n//# sourceURL=webpack://create-wasm-app/./index.js?");

/***/ })

}]);