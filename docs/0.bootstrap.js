(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var worker_loader_webworker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! worker-loader!./webworker.js */ \"./node_modules/worker-loader/dist/cjs.js!./webworker.js\");\n\nconst diffWorker = new worker_loader_webworker_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\njQuery.fn.shake = function (interval, distance, times) {\n\tinterval = typeof interval == \"undefined\" ? 100 : interval;\n\tdistance = typeof distance == \"undefined\" ? 10 : distance;\n\ttimes = typeof times == \"undefined\" ? 3 : times;\n\tvar jTarget = $(this);\n\tjTarget.css('position', 'relative');\n\tfor (var iter = 0; iter < (times + 1); iter++) {\n\t\tjTarget.animate({\n\t\t\tleft: ((iter % 2 == 0 ? distance : distance * -1))\n\t\t}, interval);\n\t}\n\treturn jTarget.animate({\n\t\tleft: 0\n\t}, interval);\n}\n\nclass Diffenator {\n\tconstructor() {\n\t\tthis.beforeFont = null;\n\t\tthis.afterFont = null;\n\t}\n\n\tget beforeCssStyle() {\n\t\treturn document.styleSheets[0].cssRules[0].style\n\t}\n\tget afterCssStyle() {\n\t\treturn document.styleSheets[0].cssRules[1].style\n\t}\n\n\tsetVariationStyle(variations) {\n\t\tlet rule = document.styleSheets[0].cssRules[2].style\n\t\trule.setProperty(\"font-variation-settings\", variations)\n\t}\n\n\n\tdropFile(files, element) {\n\t\tif (!files[0].name.match(/\\.[ot]tf$/i)) {\n\t\t\t$(element).shake()\n\t\t\treturn;\n\t\t}\n\t\tvar style;\n\t\tif (element.id == \"fontbefore\") {\n\t\t\tstyle = this.beforeCssStyle;\n\t\t\t$(element).find(\"h2\").addClass(\"font-before\")\n\t\t} else {\n\t\t\tstyle = this.afterCssStyle;\n\t\t\t$(element).find(\"h2\").addClass(\"font-after\")\n\t\t}\n\t\twindow.thing = files[0]\n\t\t$(element).find(\"h2\").text(files[0].name);\n\t\tstyle.setProperty(\"src\", \"url(\" + URL.createObjectURL(files[0]) + \")\")\n\t\tvar reader = new FileReader();\n\t\tlet that = this;\n\t\treader.onload = function (e) {\n\t\t\tlet u8 = new Uint8Array(this.result);\n\t\t\tif (element.id == \"fontbefore\") {\n\t\t\t\tthat.beforeFont = u8;\n\t\t\t} else {\n\t\t\t\tthat.afterFont = u8;\n\t\t\t}\n\t\t\tif (that.beforeFont && that.afterFont) {\n\t\t\t\tthat.letsDoThis();\n\t\t\t}\n\t\t};\n\t\treader.readAsArrayBuffer(files[0]);\n\t}\n\n\n\trenderTableDiff(node, toplevel) {\n\t\tvar wrapper = $(\"<div> </div>\");\n\t\tif (!node) {\n\t\t\treturn wrapper\n\t\t}\n\t\tif (Array.isArray(node)) {\n\t\t\tvar before = $(\"<span/>\");\n\t\t\tbefore.addClass(\"attr-before\");\n\t\t\tbefore.html(\" \" + node[0] + \" \");\n\t\t\tvar after = $(\"<span/>\");\n\t\t\tafter.addClass(\"attr-after\");\n\t\t\tafter.append(this.renderTableDiff(node[1], true).children());\n\t\t\twrapper.append(before);\n\t\t\twrapper.append(after);\n\t\t\treturn wrapper\n\t\t}\n\t\tif (node.constructor != Object) {\n\t\t\tvar thing = $(\"<span/>\");\n\t\t\tthing.html(node);\n\t\t\twrapper.append(thing);\n\t\t\treturn wrapper\n\t\t}\n\t\tfor (const [key, value] of Object.entries(node)) {\n\t\t\tvar display = $(\"<div/>\");\n\t\t\tdisplay.addClass(\"node\")\n\t\t\tif (!toplevel) {\n\t\t\t\tdisplay.hide()\n\t\t\t}\n\t\t\tdisplay.append(key);\n\t\t\tdisplay.append(this.renderTableDiff(value, false).children());\n\t\t\twrapper.append(display)\n\t\t}\n\t\treturn wrapper\n\n\t}\n\n\tsetVariations() {\n\t\tlet cssSetting = $(\"#axes input\").map(function () {\n\t\t\treturn `\"${this.id.replace(\"axis-\", \"\")}\" ${this.value}`\n\t\t}).get().join(\", \");\n\t\tthis.setVariationStyle(cssSetting);\n\t\tthis.updateGlyphs();\n\t}\n\n\tsetupAxes(axes) {\n\t\t$(\"#axes\").empty();\n\t\tfor (var [tag, limits] of Object.entries(axes)) {\n\t\t\tconsole.log(tag,limits)\n\t\t\tlet [axis_min, axis_def, axis_max] = limits;\n\t\t\tlet axis = $(`<div class=\"axis\">\n\t\t\t\t${tag}\n\t\t\t\t<input type=\"range\" min=\"${axis_min}\" max=\"${axis_max}\" value=\"${axis_def}\" class=\"slider\" id=\"axis-${tag}\">\n\t\t\t`);\n\t\t\t$(\"#axes\").append(axis);\n\t\t\taxis.on(\"input\", this.setVariations.bind(this))\n\t\t\taxis.on(\"change\", this.updateWords.bind(this))\n\t\t}\n\t}\n\n\tprogress_callback(message) {\n\t\tconsole.log(\"Got json \", message)\n\t\tif (\"type\" in message && message.type == \"ready\") {\n\t\t\t$(\"#bigLoadingModal\").hide()\n\t\t\t$(\"#startModal\").show()\n\t\t} else if (message.type == \"axes\") {\n\t\t\tthis.setupAxes(message.axes)\n\t\t} else if (message.type == \"tables\") {\n\t\t\tconsole.log(\"Hiding spinner\")\n\t\t\t$(\"#spinnerModal\").hide();\n\t\t\tlet table_diff = message.tables;\n\t\t\t$(\"#difftable\").empty();\n\t\t\t$(\"#difftable\").append(this.renderTableDiff({\"tables\":table_diff}, true).children())\n\t\t} else if (message.type == \"glyphs\") {\n\t\t\t$(\"#spinnerModal\").hide();\n\t\t\tlet glyph_diff = message.glyphs;\n\t\t\tthis.renderGlyphDiff(glyph_diff);\n\t\t\t$(\".node\").on(\"click\", function (event) { $(this).children().toggle(); event.stopPropagation() })\n\t\t} else if (message.type == \"words\") {\n\t\t\t$(\"#spinnerModal\").hide();\n\t\t\t$(\"#wordspinner\").hide();\n\t\t\tlet diffs = message.words;\n\t\t\tfor (var [script, words] of Object.entries(diffs)) {\n\t\t\t\tthis.renderWordDiff(script, words);\n\t\t\t}\n\t\t}\n\t}\n\n\tvariationLocation() {\n\t\t// Return the current axis location as a string of the form\n\t\t// tag=value,tag=value\n\t\treturn $(\"#axes input\").map(function () {\n\t\t\treturn `${this.id.replace(\"axis-\", \"\")}=${this.value}`\n\t\t}).get().join(\",\")\n\t}\n\n\n\tletsDoThis() {\n\t\t$(\"#startModal\").hide();\n\t\t$(\"#spinnerModal\").show();\n\t\tconsole.log(\"Current location = \", location)\n\t\tdiffWorker.postMessage({ command: \"axes\", beforeFont: this.beforeFont, afterFont: this.afterFont });\n\t\tdiffWorker.postMessage({ command: \"tables\", beforeFont: this.beforeFont, afterFont: this.afterFont });\n\t\tthis.updateGlyphs();\n\t\tthis.updateWords();\n\t}\n\n\tupdateGlyphs() {\n\t\tlet location = this.variationLocation();\n\t\tdiffWorker.postMessage({ command: \"glyphs\", beforeFont: this.beforeFont, afterFont: this.afterFont, location });\n\t}\n\n\tupdateWords() {\n\t\t$(\"#wordspinner\").show();\n\t\t$(\"#worddiff\").empty();\n\t\tlet location = this.variationLocation();\n\t\tdiffWorker.postMessage({ command: \"words\", beforeFont: this.beforeFont, afterFont: this.afterFont, location });\n\t}\n\n\taddAGlyph(glyph, where) {\n\t\twhere.append(`\n\t\t\t<div class=\"cell-word font-before\">\n\t\t    <span data-toggle=\"tooltip\" data-html=\"true\" data-title=\"name: ${glyph.name}<br>unicode: ${glyph.unicode}\">\n\t        ${glyph.string}\n\t        </span>\n\t\t\t</div>\n\t\t`);\n\t}\n\n\n\taddAWord(diff, where) {\n\t\twhere.append(`\n\t\t\t<div class=\"cell-word font-before\">\n\t\t    <span data-toggle=\"tooltip\" data-html=\"true\" data-title=\"before: <pre>${diff.buffer_a}</pre><br>after: <pre>${diff.buffer_b}</pre><br>percent: ${diff.percent}\">\n\t        ${diff.word}\n\t        </span>\n\t\t\t</div>\n\t\t`);\n\t}\n\trenderGlyphDiff(glyph_diff) {\n\t\t$(\"#glyphdiff\").empty();\n\t\tfor (var [key, glyphs] of Object.entries(glyph_diff)) {\n\t\t\tlet title = key.charAt(0).toUpperCase() + key.slice(1);\n\t\t\tif (glyphs.length > 0) {\n\t\t\t\tlet that = this;\n\t\t\t\t$(\"#glyphdiff\").append($(`<h2>${title} glyphs</h2>`));\n\t\t\t\tlet place = $('<div class=\"glyphgrid\"/>')\n\t\t\t\t$(\"#glyphdiff\").append(place);\n\t\t\t\tglyphs.forEach((glyph) => {\n\t\t\t\t\tthat.addAGlyph(glyph, place)\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\t$('[data-toggle=\"tooltip\"]').tooltip()\n\t}\n\n\n\trenderWordDiff(script, diffs) {\n\t\t$(\"#worddiff\").append($(`<h2>${script} words</h2>`));\n\t\tlet place = $('<div class=\"wordgrid\"/>')\n\t\t$(\"#worddiff\").append(place);\n\t\tdiffs.forEach((glyph) => {\n\t\t\tthis.addAWord(glyph, place)\n\t\t})\n\t\t$('[data-toggle=\"tooltip\"]').tooltip()\n\t}\n\n}\n\n$(function () {\n\twindow.diffenator = new Diffenator();\n\tdiffWorker.onmessage = (e) => window.diffenator.progress_callback(e.data);\n\t$(\"#bigLoadingModal\").show()\n\n\t$('.fontdrop').on(\n\t\t'dragover dragenter',\n\t\tfunction (e) {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\t$(this).addClass(\"dragging\");\n\t\t}\n\t)\n\t$('.fontdrop').on(\n\t\t'dragleave dragend',\n\t\tfunction (e) {\n\t\t\t$(this).removeClass(\"dragging\");\n\t\t}\n\t);\n\n\t$('.fontdrop').on(\n\t\t'drop',\n\t\tfunction (e) {\n\t\t\t$(this).removeClass(\"dragging\");\n\t\t\tif (e.originalEvent.dataTransfer && e.originalEvent.dataTransfer.files.length) {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\tdiffenator.dropFile(e.originalEvent.dataTransfer.files, this);\n\t\t\t}\n\t\t}\n\t);\n\n\t$(\"#fonttoggle\").click(function () {\n\t\tif ($(this).text() == \"Old\") {\n\t\t\t$(this).text(\"New\");\n\t\t\t$(\".font-before\").removeClass(\"font-before\").addClass(\"font-after\");\n\t\t} else {\n\t\t\t$(this).text(\"Old\");\n\t\t\t$(\".font-after\").removeClass(\"font-after\").addClass(\"font-before\");\n\t\t}\n\t})\n\n})\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./node_modules/worker-loader/dist/cjs.js!./webworker.js":
/*!***************************************************************!*\
  !*** ./node_modules/worker-loader/dist/cjs.js!./webworker.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Worker_fn; });\nfunction Worker_fn() {\n  return new Worker(__webpack_require__.p + \"bootstrap.worker.js\");\n}\n\n\n//# sourceURL=webpack:///./webworker.js?./node_modules/worker-loader/dist/cjs.js");

/***/ })

}]);